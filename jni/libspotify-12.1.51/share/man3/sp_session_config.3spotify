.TH "sp_session_config" 3spotify "Wed Jun 13 2012" "libspotify" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sp_session_config \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <api.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBapi_version\fP"
.br
.RI "\fIThe version of the Spotify API your application is compiled with. Set to \fBSPOTIFY_API_VERSION\fP. \fP"
.ti -1c
.RI "const char * \fBcache_location\fP"
.br
.ti -1c
.RI "const char * \fBsettings_location\fP"
.br
.ti -1c
.RI "const void * \fBapplication_key\fP"
.br
.RI "\fIYour application key. \fP"
.ti -1c
.RI "size_t \fBapplication_key_size\fP"
.br
.RI "\fIThe size of the application key in bytes. \fP"
.ti -1c
.RI "const char * \fBuser_agent\fP"
.br
.ti -1c
.RI "const \fBsp_session_callbacks\fP * \fBcallbacks\fP"
.br
.RI "\fIDelivery callbacks for session events, or NULL if you are not interested in any callbacks (not recommended!). \fP"
.ti -1c
.RI "void * \fBuserdata\fP"
.br
.RI "\fIUser supplied data for your application. \fP"
.ti -1c
.RI "bool \fBcompress_playlists\fP"
.br
.ti -1c
.RI "bool \fBdont_save_metadata_for_playlists\fP"
.br
.ti -1c
.RI "bool \fBinitially_unload_playlists\fP"
.br
.ti -1c
.RI "const char * \fBdevice_id\fP"
.br
.ti -1c
.RI "const char * \fBproxy\fP"
.br
.ti -1c
.RI "const char * \fBproxy_username\fP"
.br
.ti -1c
.RI "const char * \fBproxy_password\fP"
.br
.ti -1c
.RI "const char * \fBca_certs_filename\fP"
.br
.ti -1c
.RI "const char * \fBtracefile\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Session config 
.PP
\fBExamples: \fP
.in +1c
.PP
\fBjukebox.c\fP.
.SH "Field Documentation"
.PP 
.SS "const char* \fBsp_session_config::ca_certs_filename\fP"Path to a file containing the root ca certificates that the peer should be verified with. The file must be a concatenation of all certificates in PEM format. Provided with libspotify is a sample pem file in examples. It is recommended that the application export a similar file from the local certificate store. 
.SS "const char* \fBsp_session_config::cache_location\fP"The location where Spotify will write cache files. This cache include tracks, cached browse results and coverarts. Set to empty string ('') to disable cache 
.SS "bool \fBsp_session_config::compress_playlists\fP"Compress local copy of playlists, reduces disk space usage 
.SS "const char* \fBsp_session_config::device_id\fP"Device ID for offline synchronization and logging purposes. The Device Id must be unique to the particular device instance, i.e. no two units must supply the same Device ID. The Device ID must not change between sessions or power cycles. Good examples is the device's MAC address or unique serial number. 
.SS "bool \fBsp_session_config::dont_save_metadata_for_playlists\fP"Don't save metadata for local copies of playlists Reduces disk space usage at the expense of needing to request metadata from Spotify backend when loading list 
.SS "bool \fBsp_session_config::initially_unload_playlists\fP"Avoid loading playlists into RAM on startup. See \fBsp_playlist_is_in_ram()\fP for more details. 
.SS "const char* \fBsp_session_config::proxy\fP"Url to the proxy server that should be used. The format is protocol://<host>:port (where protocal is http/https/socks4/socks5) 
.SS "const char* \fBsp_session_config::proxy_password\fP"Password to authenticate with proxy server 
.SS "const char* \fBsp_session_config::proxy_username\fP"Username to authenticate with proxy server 
.SS "const char* \fBsp_session_config::settings_location\fP"The location where Spotify will write setting files and per-user cache items. This includes playlists, track metadata, etc. 'settings_location' may be the same path as 'cache_location'. 'settings_location' folder will not be created (unlike 'cache_location'), if you don't want to create the folder yourself, you can set 'settings_location' to 'cache_location'. 
.SS "const char* \fBsp_session_config::tracefile\fP"Path to API trace file 
.SS "const char* \fBsp_session_config::user_agent\fP"'User-Agent' for your application - max 255 characters long The User-Agent should be a relevant, customer facing identification of your application 

.SH "Author"
.PP 
Generated automatically by Doxygen for libspotify from the source code.
